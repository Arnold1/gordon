Watermark S3 Images
=======================

In this example we are going to create one lambda which will automatically watermark all files we upload to s3. In this tutorial we are going to:

  * Create a Lambda
  * Make S3 call our lambda when a file is created.

Before we start, make sure you have:

 * An AWS Account
 * You've setup your AWS credentials in your machine (:doc:`../setup_aws`)
 * Gordon is installed (:doc:`../installation`)
 * You have created a bucket in the same region where you are going to deploy your lambda. For the rest of the tutorial, we are calling this bucket ``SOURCE-BUCKET``.

.. note::

   The lambda in this tutorial, will be written in python.

Create your Project
--------------------

From the command line, cd into a directory where you’d like to store your code, then run the following command:

.. code-block:: bash

    $ gordon startproject images

This will create a `images` directory in your current directory with the following structure:

.. code-block:: bash

    images
    └── settings.yml

This is the minimal layout of a project. We are now going to create an application.

Create your Application
------------------------

Run the following command from the command line:

.. code-block:: bash

    $ gordon startapp watermark

This will create a `watermark` directory inside your project with the following structure:

.. code-block:: bash

    watermark/
    ├── helloworld.py
    └── settings.yml

By default, when you create a new application, gordon will create one really simple lambda called ``helloworld``.

In the next step we'll install your application

Install your application
------------------------

In order to install your application you need to add it to the ``apps`` list in the project ``settings.yml``.

Because we are going to create later a S3 event source, we'll need to install ``gordon.contrib.s3`` too.

Edit your project ``settings.yml`` file and add ``watermark`` to the list of installed apps.

.. code-block:: yaml

  ---
  project: hellopython
  default-region: us-east-1
  apps:
    - gordon.contrib.helpers
    - gordon.contrib.lambdas
    - gordon.contrib.s3
    - watermark

In the next step we are going to make the default lambda gordon provides, do what we want it to do.

Create your Lambda
--------------------

Gordon creates a default lambda called ``helloworld``. Because we don't like the name for this example, we are going to
get rid of it.

  * Delete ``watermark/helloworld.py``
  * Create a new file ``watermark/putwatermark.py``

Now, edit ``watermark/putwatermark.py`` and make it looks like this:

.. code-block:: python

  import json
  import urllib
  import StringIO

  import boto3
  from PIL import Image, ImageDraw


  s3 = boto3.client('s3')

  def mark(source_image):
    source = Image.open(source_image)
    watermark = Image.new("RGBA", source.size)
    draw = ImageDraw.ImageDraw(watermark, "RGBA")
    draw.text((10, 10), "My Company Ltd")
    mask = watermark.convert("L").point(lambda x: min(x, 200))
    watermark.putalpha(mask)
    source.paste(watermark, None, watermark)
    out = StringIO.StringIO()
    source.save(out, "JPEG")
    return out


  def handler(event, context):

    bucket = event['Records'][0]['s3']['bucket']['name']
    key = urllib.unquote_plus(event['Records'][0]['s3']['object']['key']).decode('utf8')

    try:
        response = s3.get_object(Bucket=bucket, Key=key)
        return response['ContentType']
    except Exception as e:
        print(e)
        print('Error getting object {} from bucket {}.'.format(key, bucket))
        raise e

    watermark_image = mark(response['Body'])

    try:
        s3.put_object(Bucket=bucket, Key=key, Body=watermark_image.read())
    except Exception as e:
        print(e)
        print('Error uploading object {} to bucket {}.'.format(key, bucket))
        raise e


The code of our lambda is ready! Now we only need to register it, and make sure it can read and write our bucket.

Open your ``watermark/settings.yml``. And make it look like this:

.. code-block:: yaml

  lambdas:
    putwatermark:
      code: putwatermark.py
      description: Python function which watermarks images
      python_requirements:
        - pillow
      policies:
        read_write_bucket:
          Version: "2012-10-17"
          Statement:
            -
              Action:
                - "s3:ListBucket"
                - "s3:GetBucketLocation"
              Resource: "arn:aws:s3:::EXAMPLE-BUCKET-NAME"
              Effect: "Allow"
            -
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:DeleteObject"
                - "dynamodb:GetRecords"
              Resource: "arn:aws:s3:::EXAMPLE-BUCKET-NAME/*"
              Effect: "Allow"

This file is simply registering a lambda called ``putwatermark``, and telling gordon the source of the lambda is in ``putwatermark.py`` file.
Because we are going to need ``Pillow`` (The de facto imaging library for python), we are telling gordon to make it be available to our lambda.


Create an event Source
-----------------------

We need to create a new S3 event source in our gordon project. This event source will make S3 call our lambda every time we upload an object.

In order to do so, open your project ``settings.yml`` file and make it look like this:

.. code-block:: yaml
  ---
  project: images
  default-region: us-east-1
  apps:
    - gordon.contrib.helpers
    - gordon.contrib.lambdas
    - watermark

  s3:
    example_s3_integration:
      bucket: SOURCE-BUCKET
      notifications:
        - id: image_upload
          lambda: watermark.putwatermark
          events:
            - s3:ObjectCreated:Put


Build your project
--------------------

In the root of your project run the following command

.. code-block:: bash

    $ gordon build

This command will have an output similar to:

.. code-block:: bash

    $ gordon build
    Loading project resources
    Loading installed applications
      contrib_helpers:
        ✓ sleep
      contrib_lambdas:
        ✓ alias
        ✓ version
      firstapp:
        ✓ helloworld
    Building project...
      ✓ 0001_p.json
      ✓ 0002_pr_r.json
      ✓ 0003_r.json

If that's the case... great! Your project is ready to be deployed.

Deploy your project
--------------------

Projects are deployed by calling the command ``apply``. Apply will assume by default you want to deploy your project
into a new stage called ``dev``.

Stages are 100% isolated deployments of the same project. The idea is that the same project
can be deployed in the same AWS account in different stages (``dev``, ``staging``, ``production``...) in order to SAFELY test your lambda behaviour.

If you don't provive any stage using ``--stage=STAGE_NAME`` a default stage called ``dev`` will be used.

Once you are ready, call the following command:

.. code-block:: bash

    $ gordon apply

This command will have an output similar to:

.. code-block:: bash

    $ gordon apply
    Applying project...
      0001_p.json (cloudformation)
        CREATE_COMPLETE waiting... -
      0002_pr_r.json (custom)
        ✓ code/contrib_helpers_sleep.zip (364c5f6d)
        ✓ code/contrib_lambdas_alias.zip (e906090e)
        ✓ code/contrib_lambdas_version.zip (c3137e97)
        ✓ code/firstapp_helloworld.zip (db6f502e)
      0003_r.json (cloudformation)
        CREATE_COMPLETE

And you are done! Your lambda is ready to be used on AWS!

Test your Lambda
--------------------

In order to test it, you can navigate into your `Lambda Console <https://console.aws.amazon.com/lambda/home?#/functions>`_ and:

  * Click on the lambda we have just created. It should be called something like: ``dev-hellopython-r-FirstappHelloworld-XXXXXXXX``
  * Click the blue button named ``Test``
  * Select the ``Hello World`` Sample event template (It should come selected by default)
  * Click ``Save and Test``
  * You should get a succeed message: ``Execution result: succeeded``, and some log information.


Congratulations! You've just deployed your first lambda into AWS using gordon!
